A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the number of different good meals you can make from this list modulo 109 + 7.

Note that items with different indices are considered different even if they have the same deliciousness value.

 

Example 1:

Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).
Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.
Example 2:

Input: deliciousness = [1,1,1,3,3,3,7]
Output: 15
Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.
 

Constraints:

1 <= deliciousness.length <= 105
0 <= deliciousness[i] <= 220


class Solution {
public:
int countPairs(vector& d) {

    /*instead of finding two numbers whose sum is in power of 2
    try to find second number when sum and first number is  known*/
    
    int n=d.size();
    long long ans=0;
    unordered_map<int,int> m;
    for(auto &it:d)
    {
        
        int val=it;
       // long long freq=(long long)it.second;
        int i=0;
        
        // max sum can be 2^21(2^20 + 2^20)
        // min sum can be 1 (1+0)
        for( i=0;i<=21;i++)
        {
            int p=1<<i;
            if(m.find(p-val)!=m.end())
            {
             //   cout<<val<<" "<<p-val<<endl;
                
                ans=ans +m[p-val];
            }
        }
        
        m[it]++;

        
        
    }
    
    
     return (int)(ans%1000000007);
  
    
   
    
}
};
