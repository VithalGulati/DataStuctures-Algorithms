There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.

Return the number of bulbs that are on after n rounds.

 

Example 1:


Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].
After the first round, the three bulbs are [on, on, on].
After the second round, the three bulbs are [on, off, on].
After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 1
 

Constraints:

0 <= n <= 109


/**
 * @brief 
 * Given n bulbs that are initially off. 
 * You first "turn on" all the bulbs, 
 * 
 * then you "turn off" "every second bulb" (i/2 == 0).
 * On the third round, you toggle "every third bulb" (i/3 == 0).
 * 
 * For the ith round, you toggle every i bulb. 
 * For the nth round, you only toggle the last bulb.
 * 
 * Return the number of bulbs that are on after n rounds. 
 * 
 * @algo1 bruce force 
 *  Time O(N^2) count for every round of the toggle
 *  Space O(1)
 * 
 * @algo2 Find the number perfect square less equal than n -> Why perfect square?
 *  By observation, we target on perfect square. 
 *  [Key] 
 *    If you are not a perfect square then you must have even factors pair by pair.
 *    Each factor represents a toggle on the bulb.
 *  
 * 
 *  For example, ans is only that number which is having odd length (lights on)
 *  
 *        1    2      3       4       5      6          7       8           9        10
 * Toggle 1    1,2    1,3     1,2,4   1,5    1,2,3,6    1,7     1,2,4,8     1,3,9    1,2,5,10
 */

// aglo2
class Solution {
public:
    int bulbSwitch(int n) {
        // edge cases invalid n 
        // n must >= 0
        if(n == 0) return 0;
        if(n == 1) return 1;

        int ans = 0;
        for(int i=1; i*i<=n; i++) {
           ans++;
        }
        return ans;
    }
};

// aglo1
class Solution {
public:
    int bulbSwitch(int n) {
        // edge cases invalid n 
        // n must >= 0
        if(n == 0) return 0;
        if(n == 1) return 1;

        vector<int> bulb(n+1);
        for(int i=1; i<=n; i++) {
            int hop = i;
            for(int j=hop; j<=n; j+=hop) {
                bulb[j] = bulb[j]^1;
            }
        }

        int ans = 0;
        for(int light: bulb) {
            if(light) ans++;
        }
        return ans;
    }
};
