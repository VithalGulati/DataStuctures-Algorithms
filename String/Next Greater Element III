Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.

 

Example 1:

Input: n = 12
Output: 21
Example 2:

Input: n = 21
Output: -1
 

Constraints:

1 <= n <= 231 - 1

class Solution {
public:
    int nextGreaterElement(int num) {
        string s;
        s=to_string(num);
        int k=-1;
        int n=s.size();
        for(int i=n-2;i>=0;i--)
        {
            if(s[i]<s[i+1])
            {
                k=i;
                break;
            }
        }
        if(k==-1)
        {
            return -1;
        }
       
        int l=k;
        for(int i=n-1;i>=k;i--)
        {
            if(s[i]>s[k])
            {
                l=i;
                break;
            }
        }
        swap(s[k],s[l]);
        reverse(s.begin()+k+1,s.end());
        if((stoll(s))>INT_MAX)
        {
            return -1;
        }
        else
        {
            
            return stoi(s);
        }
    }
};
