Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
 

Constraints:

1 <= words.length <= 500
1 <= words[i] <= 10
words[i] consists of lowercase English letters.
k is in the range [1, The number of unique words[i]]


class Solution {
public:
    static bool mycmp(pair<string,int>a,pair<string,int>b)
    {
        if(a.second==b.second)
        {
            return a.first<b.first;
        }
        return a.second>b.second;
    }
    vector<string> topKFrequent(vector<string>& words, int k) {
        
        unordered_map<string,int>mp;;
        int n=words.size();
        
        
        for(int i = 0; i < n; i++)
        {
            mp[words[i]]++;
        }
        vector<pair<string,int>>res;
        for(auto x:mp)
        {
            res.push_back(make_pair(x.first,x.second));
        }
        sort(res.begin(),res.end(),mycmp);
        vector<string>ans;
        for(int i=0;i<k;i++)
        {
            ans.push_back(res[i].first);
        }
        return ans;
        
    }
};
