Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.






class Solution {
public:
   vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        
        int n = mat.size();
        
        int m = mat[0].size();
        
        vector<vector<int>> dp(n, vector<int> (m, INT_MAX - 1));
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(mat[i][j] == 0)
                {
                    dp[i][j] = 0;
                }
                else
                {
                    if(i - 1 >= 0)
                    {
                        dp[i][j] = min(dp[i][j], 1 + dp[i - 1][j]);
                    }
                    
                    if(j - 1 >= 0)
                    {
                        dp[i][j] = min(dp[i][j], 1 + dp[i][j - 1]);
                    }
                }
            }
        }
        
        for(int i = n - 1; i >= 0; i--)
        {
            for(int j = m - 1; j >= 0; j--)
            {
                if(i + 1 < n)
                {
                    dp[i][j] = min(dp[i][j], 1 + dp[i + 1][j]);
                }
                
                if(j + 1 < m)
                {
                    dp[i][j] = min(dp[i][j], 1 + dp[i][j + 1]);
                }
            }
        }
        
        return dp;
    }
};
