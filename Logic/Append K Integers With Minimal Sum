You are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.

Return the sum of the k integers appended to nums.

 

Example 1:

Input: nums = [1,4,25,10,25], k = 2
Output: 5
Explanation: The two unique positive integers that do not appear in nums which we append are 2 and 3.
The resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.
The sum of the two integers appended is 2 + 3 = 5, so we return 5.
Example 2:

Input: nums = [5,6], k = 6
Output: 25
Explanation: The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.
The resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. 
The sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25.






class Solution {
public:
    long long minimalKSum(vector<int>& nums, long long k) {
        sort(nums.begin(), nums.end());
        
        vector<long long>v;
        v.push_back(nums[0]);
        for(int i =1; i<nums.size(); i++ ){
            if(nums[i]!=nums[i-1]){
                v.push_back(nums[i]);
                
            }
        }
        sort(v.begin(),v.end());

        
        
        long long int  sum = k*((k+1))/2;
        for(int i = 0; i<v.size(); i++){
            if(v[i]<=k){
                k++;
                sum = sum - v[i] + k;
            }
            else{
                break;
            }
        }
        
        return sum;
        
    }
};
