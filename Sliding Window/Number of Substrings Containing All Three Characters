Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:

Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 
Example 2:

Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 
Example 3:

Input: s = "abc"
Output: 1
 

Constraints:

3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.


class Solution {
public:
    int numberOfSubstrings(string nums) {
         int i=0,j=0;
        int n=nums.size();
        int ans=0;
        int count=0;
        unordered_map<char,int>mp;
        mp['a']=0;
        mp['b']=0;
        mp['c']=0;
        
        while(i<n)
        {
            mp[nums[i]]++;
            
            while(mp['a']>=1 && mp['b']>=1 && mp['c']>=1)
            {
               count++;
               mp[nums[j]]--;
               j++;
              ans+=n-i;
            }
            i++;
        }
        return ans;
        
    }
};
