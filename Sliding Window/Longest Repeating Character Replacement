You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
 

Constraints:

1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length


class Solution {
public:
    
    // return count of max appearing character
    int maxFreq(unordered_map<char, int>& freq){
        int counter = 0;
        for(const auto& p : freq)
            counter = max(counter, p.second);
        return counter;
    }
    
    int characterReplacement(string s, int k) {

        unordered_map<char, int> freq; // stores freq of each char
        int l = 0;
        int r = 0;
		char rightChar;
		char leftChar;
        int maxLength = 1;
        
        // loop till right pointer reaches end of string
        while(r != s.size()){
            rightChar = s[r];
            leftChar = s[l];
            
            freq[rightChar]++; // increment freq for right char            
            r++; // move right pointer
            int currLength = r - l; // compute max of current window
            
            // check if cannot do any replacements
            if(currLength - maxFreq(freq) > k){ 
                freq[leftChar]--; // decrement freq for left char
                l++; // move left pointer
                currLength--; // adjust current max
            }
            
            maxLength = max(maxLength, currLength);
        }    
              
        return maxLength;
    }
};
