Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

class Solution {
private:
    void dfs(int node , vector <vector <int>> &adj, vector <int> &curr, vector <int> &vis, vector <vector <int>> &ans, int n ){
        
        if(node == n - 1){
            curr.push_back(node);
            ans.push_back(curr);
            curr.pop_back();
            return ;
        }
        
        vis[node] = 1;
        
        curr.push_back(node);
        
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(it, adj, curr, vis, ans, n);
            }
        }
        
        vis[node] = 0;
        
        curr.pop_back();
        
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        
        vector <vector <int> > ans;
        int n = graph.size();
        
        if(n == 0) return ans;
        
        vector <int> curr;
        vector <int> vis(n , 0);
       
        dfs(0, graph, curr, vis, ans, n);
        
        return ans;
    }
};
