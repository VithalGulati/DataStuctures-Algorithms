Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.


class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> Q;
        Q.push(root);
        int len, i, lastLevel = 0;
        TreeNode* curr;
        
        lastLevel = 0;
        while(!Q.empty())
        {
            len = Q.size();
            for(i = 1; i <= len; i++)
            {
                curr = Q.front();
                Q.pop();
                if(curr->left != nullptr)
                {
                    if(lastLevel == 1)
                        return false;
                    Q.push(curr->left);
                }
                else
                    lastLevel = 1;
                
                if(curr->right != nullptr)
                {
                    if(lastLevel == 1)
                        return false;
                    Q.push(curr->right);
                }
                else
                    lastLevel = 1;
                
            }
        }
        
        return true;
    }
};
