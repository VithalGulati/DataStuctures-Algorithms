ou are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100


class Solution {
public:
    int dp[601][101][101];
    
    int fun(vector<pair<int , int> >& s, int m, int n , int l , int i)
    {
        if( i==l || (m==0 && n==0) )return dp[i][m][n] = 0;
        
         if(dp[i][m][n]!=-1)return dp[i][m][n]; 
        
        int c0=s[i].first , c1=s[i].second;
        
        if(m >= c0 && n >= c1) {  return dp[i][m][n] = max(fun(s , m , n , l , i+1) , 1 + fun(s , m-c0 , n-c1 , l , i+1 )) ;}
         return dp[i][m][n] = fun(s , m , n , l , i+1) ;
        
        
    }
    int findMaxForm(vector<string>& s, int m, int n) {
        int l = s.size();
		
        vector<pair<int , int> > cntZO(l) ;
        int i=0;
        for(auto x : s)
        { 
            
            int one = count(x.begin() , x.end() , '1' ) ;
            int zero = x.length() - one;
            cntZO[i] = {zero , one} ;
            i++;
        }
        memset(dp , -1 , sizeof(dp));
        
        return fun(cntZO, m,n,l,0 );
    }
};
