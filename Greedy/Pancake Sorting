Given an array of integers arr, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:

Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.

Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.

 

Example 1:

Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.
Example 2:

Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.
Note that other answers, such as [3, 3], would also be accepted.


class Solution {
public:
// function for flipping the array from 1 to given index
    void flip(vector<int>& arr, int end) {
        int start = 0;
        while(start < end) {
            swap(arr[start++], arr[end--]);
        }
    }
    
    vector<int> pancakeSort(vector<int>& arr) {
        int i, j, n = arr.size();
        vector<int> res;
        
		
		// O(n) to iterate all the values
        for (i = n; i > 0; i--) {
		// if i is at its correct position already then no need to flip
            if (arr[i-1] == i)
                continue;
            
			// if i is not at its correct position then find where it is
            // find index of i
			// O(n) operation to find
            for(j = 0; j < n; j++)
                if (arr[j] == i)
                    break;
            
            // flip at j and then flip at i
            res.push_back(j+1);
            res.push_back(i);
			// O(n) to flip
            flip(arr, j);
            flip(arr, i-1);
			
			// after the above two flips we have i at its correct position.
        }
        
        return res;
    }
};
