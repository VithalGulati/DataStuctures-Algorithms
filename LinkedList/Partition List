Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200


class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode dummy1(0), dummy2(0);
 ListNode* head1 = &dummy1, *head2 = &dummy2;
 
 
 while( head){
     
     if( head->val < x){
         head1->next = head;
         head1= head;
     }
         
     
     else{
         head2->next = head;
         head2= head;
     }   
     
     head = head->next; 
 }
 
 head1->next = dummy2.next;
 
 
 head2->next= nullptr;
 

 return dummy1.next;
        
    }
};
