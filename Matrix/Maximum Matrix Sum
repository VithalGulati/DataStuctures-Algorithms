You are given an n x n integer matrix. You can do the following operation any number of times:

Choose any two adjacent elements of matrix and multiply each of them by -1.
Two elements are considered adjacent if and only if they share a border.

Your goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.

 

Example 1:


Input: matrix = [[1,-1],[-1,1]]
Output: 4
Explanation: We can follow the following steps to reach sum equals 4:
- Multiply the 2 elements in the first row by -1.
- Multiply the 2 elements in the first column by -1.
Example 2:


Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]
Output: 16
Explanation: We can follow the following step to reach sum equals 16:
- Multiply the 2 last elements in the second row by -1.
 

Constraints:

n == matrix.length == matrix[i].length
2 <= n <= 250
-105 <= matrix[i][j] <= 105

class Solution {
public:
    long long maxMatrixSum(vector<vector<int>>& matrix) {
		//each pair of negative signs can be cancelled
		//if there is one negative sign left over, move it to the smallest value
		//delete this value from the sum of absolute values twice - once to cancel the previously-added
		//abs value of that number, and once to account for the negative contribution
        int negs = 0;
        long long min_val = INT_MAX;
        long long sum = 0;
        for(int i = 0; i < matrix.size(); i++){
            for(int j = 0; j < matrix[0].size(); j++){
                sum += abs(matrix[i][j]);
                if(matrix[i][j] < 0) negs++;
                if(abs(matrix[i][j]) < min_val) min_val = abs(matrix[i][j]);
            }
        }
        if(negs % 2 == 0) return sum;
        else return sum - min_val*2;
    }
};
